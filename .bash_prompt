#!/usr/bin/env bash

export TERM="xterm-256color"

# colors
orange=$(tput setaf 202);
yellow=$(tput setaf 214);
blue=$(tput setaf 33);
white=$(tput setaf 15);
grey=$(tput setaf 254);
grey2=$(tput setaf 254);
red=$(tput setaf 196);
violet=$(tput setaf 135);
bold=$(tput bold);
reset=$(tput sgr0);

prompt_git() {
    local status='';
    local branchName='';
    local remote='';

    # Check if the current directory is in a Git repository.
    git rev-parse --is-inside-work-tree &>/dev/null || return;

    # Check for what branch we’re on.
    # Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
    # tracking remote branch or tag. Otherwise, get the
    # short SHA for the latest commit, or give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        git describe --all --exact-match HEAD 2> /dev/null || \
        git rev-parse --short HEAD 2> /dev/null || \
        echo '(unknown)')";

    # check status
    repoUrl="$(git config --get remote.origin.url)";
    if grep -q 'chromium/src.git' <<< "${repoUrl}"; then
        status+='✱';

        # Check for uncommitted changes in the index.
        elif ! $(git diff --quiet --ignore-submodules --cached); then
            status+='+';
        # Check for unstaged changes.
        elif ! $(git diff-files --quiet --ignore-submodules --); then
            status+='!';
        # Check for untracked files.
        elif [ -n "$(git ls-files --others --exclude-standard)" ]; then
            status+='?';
        # Check for stashed files.
        elif $(git rev-parse --verify refs/stash &>/dev/null); then
            status+='$';
    else
        status='-';
    fi;

    # check remote
    local git_status="$(git remote update && git status -uno 2> /dev/null)"
    if [[ ${git_status} == *"Your branch is ahead"* ]]; then
            remote="↑"
        elif [[ ${git_status} == *"Your branch is behind"* ]]; then
            remote="↓"
        elif [[ ${git_status} == *"Your branch has diverged"* ]]; then
            remote="↕"
        else #up-to-date
            remote="-"
    fi;

    echo -e "${1}${branchName} ${3}[${2}${status}${3}]${3}[${2}${remote}${3}]";
}

# Set the terminal title and prompt.
PS1='\n';
# PS1+="\$(if [[ \$? -gt 0 ]]; then printf \"\\[${red}\\]✖\"; else printf \"\\[${grey}\\]●\"; fi)"
PS1+="\[$grey\]● "
PS1+='\[$yellow\]\u ';  # Username
PS1+='\[${grey}\]~> ';
PS1+='\[${blue}\]\W';   # Directoty
PS1+="\$(prompt_git \"\[${grey}\]  \[${violet}\]\" \"\[${grey2}\]\" \"\[${grey}\]\")";
PS1+='\n';
PS1+='\[$grey\]╰❯ ';
PS1+='\[${reset}\]';    #reset colors
export PS1;

PS2="\[${grey}\] ❯ \[${reset}\]";
export PS2;

